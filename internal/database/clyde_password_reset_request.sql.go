// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: clyde_password_reset_request.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteExpiredPasswordResetRequests = `-- name: DeleteExpiredPasswordResetRequests :exec
DELETE FROM clyde_password_reset_request
WHERE expires_at <= $1
`

func (q *Queries) DeleteExpiredPasswordResetRequests(ctx context.Context, expiresAt pgtype.Timestamptz) error {
	_, err := q.db.Exec(ctx, deleteExpiredPasswordResetRequests, expiresAt)
	return err
}

const deletePasswordResetRequest = `-- name: DeletePasswordResetRequest :exec
DELETE FROM clyde_password_reset_request
WHERE id = $1
`

func (q *Queries) DeletePasswordResetRequest(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deletePasswordResetRequest, id)
	return err
}

const findPasswordResetRequestById = `-- name: FindPasswordResetRequestById :one
SELECT id, user_id, created_at, updated_at, expires_at, code_hash FROM clyde_password_reset_request
WHERE id = $1
`

func (q *Queries) FindPasswordResetRequestById(ctx context.Context, id string) (ClydePasswordResetRequest, error) {
	row := q.db.QueryRow(ctx, findPasswordResetRequestById, id)
	var i ClydePasswordResetRequest
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.CodeHash,
	)
	return i, err
}

const insertPasswordResetRequest = `-- name: InsertPasswordResetRequest :exec
INSERT INTO clyde_password_reset_request (id, user_id, created_at, updated_at, expires_at, code_hash)
VALUES ($1, $2, COALESCE($3, CURRENT_TIMESTAMP), COALESCE($4, CURRENT_TIMESTAMP), $5, $6)
`

type InsertPasswordResetRequestParams struct {
	ID        string
	UserID    string
	Column3   interface{}
	Column4   interface{}
	ExpiresAt pgtype.Timestamptz
	CodeHash  string
}

func (q *Queries) InsertPasswordResetRequest(ctx context.Context, arg InsertPasswordResetRequestParams) error {
	_, err := q.db.Exec(ctx, insertPasswordResetRequest,
		arg.ID,
		arg.UserID,
		arg.Column3,
		arg.Column4,
		arg.ExpiresAt,
		arg.CodeHash,
	)
	return err
}

const listPasswordResetRequests = `-- name: ListPasswordResetRequests :many
SELECT id, user_id, created_at, updated_at, expires_at, code_hash FROM clyde_password_reset_request
ORDER BY created_at ASC
`

func (q *Queries) ListPasswordResetRequests(ctx context.Context) ([]ClydePasswordResetRequest, error) {
	rows, err := q.db.Query(ctx, listPasswordResetRequests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ClydePasswordResetRequest
	for rows.Next() {
		var i ClydePasswordResetRequest
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiresAt,
			&i.CodeHash,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePasswordResetRequest = `-- name: UpdatePasswordResetRequest :exec
UPDATE clyde_password_reset_request
SET updated_at = CURRENT_TIMESTAMP,
    expires_at = COALESCE($2, expires_at),
    code_hash = COALESCE($3, code_hash)
WHERE id = $1
`

type UpdatePasswordResetRequestParams struct {
	ID        string
	ExpiresAt pgtype.Timestamptz
	CodeHash  string
}

func (q *Queries) UpdatePasswordResetRequest(ctx context.Context, arg UpdatePasswordResetRequestParams) error {
	_, err := q.db.Exec(ctx, updatePasswordResetRequest, arg.ID, arg.ExpiresAt, arg.CodeHash)
	return err
}
