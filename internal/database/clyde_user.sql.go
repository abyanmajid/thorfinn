// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: clyde_user.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteUser = `-- name: DeleteUser :one
DELETE FROM clyde_user
WHERE id = $1
RETURNING id, email, password_hash, recovery_code, created_at, updated_at, name, role, is_email_verified, is_2fa_enabled
`

func (q *Queries) DeleteUser(ctx context.Context, id string) (ClydeUser, error) {
	row := q.db.QueryRow(ctx, deleteUser, id)
	var i ClydeUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.RecoveryCode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Role,
		&i.IsEmailVerified,
		&i.Is2faEnabled,
	)
	return i, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, name, email, role, 
       is_email_verified, is_2fa_enabled, 
       created_at, updated_at
FROM clyde_user
WHERE email = $1
`

type FindUserByEmailRow struct {
	ID              string
	Name            string
	Email           string
	Role            string
	IsEmailVerified pgtype.Bool
	Is2faEnabled    pgtype.Bool
	CreatedAt       pgtype.Timestamptz
	UpdatedAt       pgtype.Timestamptz
}

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (FindUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, findUserByEmail, email)
	var i FindUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Role,
		&i.IsEmailVerified,
		&i.Is2faEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserById = `-- name: FindUserById :one
SELECT id, name, email, role, 
       is_email_verified, is_2fa_enabled, 
       created_at, updated_at
FROM clyde_user
WHERE id = $1
`

type FindUserByIdRow struct {
	ID              string
	Name            string
	Email           string
	Role            string
	IsEmailVerified pgtype.Bool
	Is2faEnabled    pgtype.Bool
	CreatedAt       pgtype.Timestamptz
	UpdatedAt       pgtype.Timestamptz
}

func (q *Queries) FindUserById(ctx context.Context, id string) (FindUserByIdRow, error) {
	row := q.db.QueryRow(ctx, findUserById, id)
	var i FindUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Role,
		&i.IsEmailVerified,
		&i.Is2faEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO clyde_user (id, email, password_hash, recovery_code, name, role)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, email, password_hash, recovery_code, created_at, updated_at, name, role, is_email_verified, is_2fa_enabled
`

type InsertUserParams struct {
	ID           string
	Email        string
	PasswordHash string
	RecoveryCode string
	Name         string
	Role         string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (ClydeUser, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.ID,
		arg.Email,
		arg.PasswordHash,
		arg.RecoveryCode,
		arg.Name,
		arg.Role,
	)
	var i ClydeUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.RecoveryCode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Role,
		&i.IsEmailVerified,
		&i.Is2faEnabled,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, role, 
       is_email_verified, is_2fa_enabled, 
       created_at, updated_at
FROM clyde_user
ORDER BY created_at ASC
`

type ListUsersRow struct {
	ID              string
	Name            string
	Email           string
	Role            string
	IsEmailVerified pgtype.Bool
	Is2faEnabled    pgtype.Bool
	CreatedAt       pgtype.Timestamptz
	UpdatedAt       pgtype.Timestamptz
}

func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Role,
			&i.IsEmailVerified,
			&i.Is2faEnabled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE clyde_user
SET email = COALESCE($2, email),
    password_hash = COALESCE($3, password_hash),
    recovery_code = COALESCE($4, recovery_code),
    name = COALESCE($5, name),
    role = COALESCE($6, role),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, email, password_hash, recovery_code, created_at, updated_at, name, role, is_email_verified, is_2fa_enabled
`

type UpdateUserParams struct {
	ID           string
	Email        string
	PasswordHash string
	RecoveryCode string
	Name         string
	Role         string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (ClydeUser, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.PasswordHash,
		arg.RecoveryCode,
		arg.Name,
		arg.Role,
	)
	var i ClydeUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.RecoveryCode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Role,
		&i.IsEmailVerified,
		&i.Is2faEnabled,
	)
	return i, err
}
