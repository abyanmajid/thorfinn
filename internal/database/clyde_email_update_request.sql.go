// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: clyde_email_update_request.sql

package database

import (
	"context"
	"time"
)

const deleteEmailUpdateRequest = `-- name: DeleteEmailUpdateRequest :exec
DELETE FROM clyde_email_update_request
WHERE id = $1
`

func (q *Queries) DeleteEmailUpdateRequest(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteEmailUpdateRequest, id)
	return err
}

const findEmailUpdateRequestById = `-- name: FindEmailUpdateRequestById :one
SELECT id, user_id, created_at, updated_at, expires_at, email, code FROM clyde_email_update_request
WHERE id = $1
`

func (q *Queries) FindEmailUpdateRequestById(ctx context.Context, id string) (ClydeEmailUpdateRequest, error) {
	row := q.db.QueryRowContext(ctx, findEmailUpdateRequestById, id)
	var i ClydeEmailUpdateRequest
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.Email,
		&i.Code,
	)
	return i, err
}

const insertEmailUpdateRequest = `-- name: InsertEmailUpdateRequest :exec
INSERT INTO clyde_email_update_request (id, user_id, created_at, updated_at, expires_at, email, code)
VALUES ($1, $2, COALESCE($3, CURRENT_TIMESTAMP), COALESCE($4, CURRENT_TIMESTAMP), $5, $6, $7)
`

type InsertEmailUpdateRequestParams struct {
	ID        string
	UserID    string
	Column3   interface{}
	Column4   interface{}
	ExpiresAt time.Time
	Email     string
	Code      string
}

func (q *Queries) InsertEmailUpdateRequest(ctx context.Context, arg InsertEmailUpdateRequestParams) error {
	_, err := q.db.ExecContext(ctx, insertEmailUpdateRequest,
		arg.ID,
		arg.UserID,
		arg.Column3,
		arg.Column4,
		arg.ExpiresAt,
		arg.Email,
		arg.Code,
	)
	return err
}

const listEmailUpdateRequests = `-- name: ListEmailUpdateRequests :many
SELECT id, user_id, created_at, updated_at, expires_at, email, code FROM clyde_email_update_request
ORDER BY created_at ASC
`

func (q *Queries) ListEmailUpdateRequests(ctx context.Context) ([]ClydeEmailUpdateRequest, error) {
	rows, err := q.db.QueryContext(ctx, listEmailUpdateRequests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ClydeEmailUpdateRequest
	for rows.Next() {
		var i ClydeEmailUpdateRequest
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiresAt,
			&i.Email,
			&i.Code,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmailUpdateRequest = `-- name: UpdateEmailUpdateRequest :exec
UPDATE clyde_email_update_request
SET updated_at = CURRENT_TIMESTAMP,
    expires_at = COALESCE($2, expires_at),
    email = COALESCE($3, email),
    code = COALESCE($4, code)
WHERE id = $1
`

type UpdateEmailUpdateRequestParams struct {
	ID        string
	ExpiresAt time.Time
	Email     string
	Code      string
}

func (q *Queries) UpdateEmailUpdateRequest(ctx context.Context, arg UpdateEmailUpdateRequestParams) error {
	_, err := q.db.ExecContext(ctx, updateEmailUpdateRequest,
		arg.ID,
		arg.ExpiresAt,
		arg.Email,
		arg.Code,
	)
	return err
}
