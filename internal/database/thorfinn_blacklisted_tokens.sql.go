// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: thorfinn_blacklisted_tokens.sql

package database

import (
	"context"
)

const createBlacklistedToken = `-- name: CreateBlacklistedToken :one
INSERT INTO thorfinn_blacklisted_tokens (id, token) VALUES ($1, $2) RETURNING id, token, created_at, updated_at
`

type CreateBlacklistedTokenParams struct {
	ID    string
	Token string
}

func (q *Queries) CreateBlacklistedToken(ctx context.Context, arg CreateBlacklistedTokenParams) (ThorfinnBlacklistedToken, error) {
	row := q.db.QueryRow(ctx, createBlacklistedToken, arg.ID, arg.Token)
	var i ThorfinnBlacklistedToken
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBlacklistedToken = `-- name: GetBlacklistedToken :one
SELECT id, token, created_at, updated_at FROM thorfinn_blacklisted_tokens WHERE token = $1
`

func (q *Queries) GetBlacklistedToken(ctx context.Context, token string) (ThorfinnBlacklistedToken, error) {
	row := q.db.QueryRow(ctx, getBlacklistedToken, token)
	var i ThorfinnBlacklistedToken
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
