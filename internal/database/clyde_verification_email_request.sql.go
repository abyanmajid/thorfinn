// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: clyde_verification_email_request.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteEmailVerificationRequest = `-- name: DeleteEmailVerificationRequest :exec
DELETE FROM clyde_email_verification_request
WHERE user_id = $1
`

func (q *Queries) DeleteEmailVerificationRequest(ctx context.Context, userID string) error {
	_, err := q.db.Exec(ctx, deleteEmailVerificationRequest, userID)
	return err
}

const deleteExpiredEmailVerificationRequests = `-- name: DeleteExpiredEmailVerificationRequests :exec
DELETE FROM clyde_email_verification_request
WHERE expires_at <= $1
`

func (q *Queries) DeleteExpiredEmailVerificationRequests(ctx context.Context, expiresAt pgtype.Timestamptz) error {
	_, err := q.db.Exec(ctx, deleteExpiredEmailVerificationRequests, expiresAt)
	return err
}

const findEmailVerificationRequestByUserId = `-- name: FindEmailVerificationRequestByUserId :one
SELECT user_id, created_at, updated_at, expires_at, code FROM clyde_email_verification_request
WHERE user_id = $1
`

func (q *Queries) FindEmailVerificationRequestByUserId(ctx context.Context, userID string) (ClydeEmailVerificationRequest, error) {
	row := q.db.QueryRow(ctx, findEmailVerificationRequestByUserId, userID)
	var i ClydeEmailVerificationRequest
	err := row.Scan(
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.Code,
	)
	return i, err
}

const insertEmailVerificationRequest = `-- name: InsertEmailVerificationRequest :exec
INSERT INTO clyde_email_verification_request (user_id, created_at, updated_at, expires_at, code)
VALUES ($1, COALESCE($2, CURRENT_TIMESTAMP), COALESCE($3, CURRENT_TIMESTAMP), $4, $5)
`

type InsertEmailVerificationRequestParams struct {
	UserID    string
	Column2   interface{}
	Column3   interface{}
	ExpiresAt pgtype.Timestamptz
	Code      string
}

func (q *Queries) InsertEmailVerificationRequest(ctx context.Context, arg InsertEmailVerificationRequestParams) error {
	_, err := q.db.Exec(ctx, insertEmailVerificationRequest,
		arg.UserID,
		arg.Column2,
		arg.Column3,
		arg.ExpiresAt,
		arg.Code,
	)
	return err
}

const listEmailVerificationRequests = `-- name: ListEmailVerificationRequests :many
SELECT user_id, created_at, updated_at, expires_at, code FROM clyde_email_verification_request
ORDER BY created_at ASC
`

func (q *Queries) ListEmailVerificationRequests(ctx context.Context) ([]ClydeEmailVerificationRequest, error) {
	rows, err := q.db.Query(ctx, listEmailVerificationRequests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ClydeEmailVerificationRequest
	for rows.Next() {
		var i ClydeEmailVerificationRequest
		if err := rows.Scan(
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiresAt,
			&i.Code,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmailVerificationRequest = `-- name: UpdateEmailVerificationRequest :exec
UPDATE clyde_email_verification_request
SET updated_at = CURRENT_TIMESTAMP,
    expires_at = COALESCE($2, expires_at),
    code = COALESCE($3, code)
WHERE user_id = $1
`

type UpdateEmailVerificationRequestParams struct {
	UserID    string
	ExpiresAt pgtype.Timestamptz
	Code      string
}

func (q *Queries) UpdateEmailVerificationRequest(ctx context.Context, arg UpdateEmailVerificationRequestParams) error {
	_, err := q.db.Exec(ctx, updateEmailVerificationRequest, arg.UserID, arg.ExpiresAt, arg.Code)
	return err
}
